[gd_resource type="VisualShader" load_steps=6 format=3 uid="uid://dqqpdnykk72tg"]

[ext_resource type="Script" path="res://new_script.gd" id="1_48dlh"]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_gw4bt"]
output_port_for_preview = 0
expanded_output_ports = [0]
input_name = "uv"

[sub_resource type="VisualShaderNodeColorFunc" id="VisualShaderNodeColorFunc_nbvxi"]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeRemap" id="VisualShaderNodeRemap_ol0t3"]

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_nken6"]
default_input_values = [1, Vector2(1, 1), 2, Vector2(0, 0), 3, Vector2(0, 0), 4, Vector2(1, 1)]
initialized = true
script = ExtResource("1_48dlh")

[resource]
code = "shader_type canvas_item;
render_mode blend_mix;



// Remap2D1

		/* === Based on The Blender Foundation shader
		@ https://git.blender.org/gitweb/gitweb.cgi/blender.git/blob/HEAD:/source/blender/gpu/shaders/material/gpu_shader_material_map_range.glsl
		_______________________________________________________________________________________________________________________________________*/

		vec2 remap2d(vec2 value,vec2 InMin,vec2 InMax,vec2 OutMin, vec2 OutMax) {
			float outr = 1.0;
			{
				float __input_range = InMax.r - InMin.r;
				float __output_range = OutMax.r - OutMin.r;
				outr = OutMin.r + __output_range * ((value.r - InMin.r) / __input_range);
			}
			float outg = 1.0;
			{
				float __input_range = InMax.g - InMin.g;
				float __output_range = OutMax.g - OutMin.g;
				outg = OutMin.g + __output_range * ((value.g - InMin.g) / __input_range);
			}
			vec2 output0=vec2(outr,outg);
			return output0;
		}
	

void fragment() {
// Input:2
	vec2 n_out2p0 = UV;
	float n_out2p1 = n_out2p0.r;


	vec2 n_out33p0;
// Remap2D1:33
	vec2 n_in33p1 = vec2(1.00000, 1.00000);
	vec2 n_in33p2 = vec2(0.00000, 0.00000);
	vec2 n_in33p3 = vec2(0.00000, 0.00000);
	vec2 n_in33p4 = vec2(1.00000, 1.00000);
	{
		n_out33p0 = remap2d(n_out2p0.xy, n_in33p1.xy, n_in33p2.xy, n_in33p3.xy, n_in33p4.xy);
	}


	vec3 n_out31p0;
// ColorFunc:31
	{
		vec3 c = vec3(n_out33p0, 0.0);
		float max1 = max(c.r, c.g);
		float max2 = max(max1, c.b);
		n_out31p0 = vec3(max2, max2, max2);
	}


	float n_out32p0;
// Remap:32
	float n_in32p1 = 0.00000;
	float n_in32p2 = 1.00000;
	float n_in32p3 = 0.00000;
	float n_in32p4 = 1.00000;
	{
		float __input_range = n_in32p2 - n_in32p1;
		float __output_range = n_in32p4 - n_in32p3;
		n_out32p0 = n_in32p3 + __output_range * ((n_out2p1 - n_in32p1) / __input_range);
	}


// Output:0
	COLOR.rgb = n_out31p0;
	COLOR.a = n_out32p0;


}
"
graph_offset = Vector2(-781.473, -143.303)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(420, 180)
nodes/fragment/2/node = SubResource("VisualShaderNodeInput_gw4bt")
nodes/fragment/2/position = Vector2(-1180, -200)
nodes/fragment/31/node = SubResource("VisualShaderNodeColorFunc_nbvxi")
nodes/fragment/31/position = Vector2(99.3128, 113.476)
nodes/fragment/32/node = SubResource("VisualShaderNodeRemap_ol0t3")
nodes/fragment/32/position = Vector2(-380, -200)
nodes/fragment/33/node = SubResource("VisualShaderNodeCustom_nken6")
nodes/fragment/33/position = Vector2(-780, -60)
nodes/fragment/connections = PackedInt32Array(2, 1, 32, 0, 31, 0, 0, 0, 32, 0, 0, 1, 2, 0, 33, 0, 33, 0, 31, 0)
